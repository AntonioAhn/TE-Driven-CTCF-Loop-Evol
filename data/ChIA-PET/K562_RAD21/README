# Alignment and MANGO processing steps to produce 3D contact predictions
# for RAD21 ChIA-PET in human K562 cells. ENCODE dataset ENCSR338WUS.

### PATHS IN SOME OF THE SCRIPTS MAY NEED TO BE CHANGED TO POINT TO THE LOCATIONS OF GENOMES, GENOME INDEXES, ETC., ON YOUR LOCAL SYSTEM.
### PLEASE CHECK ALL SCRIPTS CAREFULLY PRIOR TO RUNNING!

# Whole pipeline can be invoked by running "bash README >> ENCSR338WUS.mango_pipeline.log 2>> ENCSR338WUS.mango_pipeline.log"

# Prerequisites:
# FastQC version 0.11.5
# BWA version 0.7.16a
# SAMtools version 1.5
# BEDTools version 2.26.0
# hg19 genome, in fasta sequence, and BWA index created with `bwa index`
# MANGO version 1.2.0, Wolverine branch (https://github.com/adadiehl/mango)
# MANGO dependencies:
#    1) Bowtie version 1.1.2 (Not used but required for MANGO to run)
#    2) MACS2, ersion 2.1.1
#    3) R version 3.3.3

date

ENCODE_ACC="ENCSR338WUS"
mkdir -pv {fastq,bam,mango,tmp}

WD=$(pwd)
FASTQ_DIR=$WD/fastq
BAM_DIR=$WD/bam
TMP_DIR=$WD/tmp
MANGO_DIR=$WD/mango

# Download fastq files from ENCODE
cd $FASTQ_DIR
xargs -n 1 curl -O -L < files.rep1.txt
xargs -n 1 curl -O -L < files.rep2.txt
cd $WD

# Run FastQC on each file
# Fastqc on each file
for file in ENC* ; do
    fastqc $file
done

# Align using the optimal method identified in GM12878 reanalysis...

# Replicate 1 reads...
for file in $(cat $FASTQ_DIR/rep1.pairinfo); do    
    ./do_bwa-mem.sh $FASTQ_DIR/$file $BAM_DIR 16
done &

# Replicate 2 reads...

for file in $(cat $FASTQ_DIR/rep2.pairinfo); do
    ./do_bwa-mem.sh $FASTQ_DIR/$file $BAM_DIR 16
done


# Quality check with samtools...
for file in $BAM_DIR/*.sorted.bam; do
    samtools flagstat -@ 16 $file > $BAM_DIR/$(basename $file .bam).flagstat
done

for file in $BAM_DIR/*.flagstat; do echo "$(basename $file): $(grep '%' $file)" >> $ENCODE_ACC.mapstats ; done


# Conservative filtering process, just based on quality and mappability, using only
# sam flags 4, 256, and quality 30...
for file in $BAM_DIR/*.sorted.bam; do
    ./do_filter_bams.sh $file $BAM_DIR 16
done


# Sort the files accordingly to enable bedpe creation based on X and Y coordinates.
cd tmp
for file in $BAM_DIR/*.sorted.filtered.bam; do 
    samtools sort -l 9 -T $(basename $file .bam).tmp -O bam -n -@ 16 $file | bedtools bamtobed | awk '{split($0, A, ":"); printf "%s\t%d\t%d\n", $0, A[6], A[7]}' | sort -k7 -k8 -h | awk '{printf "%s\t%d\t%d\t%s\t%d\t%s\n", $1, $2, $3, $4, $5, $6'} | gzip -9 > $BAM_DIR/$(basename $file .sorted.filtered.bam).nsort.filtered.bed.gz
done
cd $WD


# Create the bedpe files. File names for pairs of reads are in fastq/*.readinfo...
saveIFS=$IFS
IFS=$'\n'
I=1
for line in $(cat $FASTQ_DIR/rep1.pairinfo); do
    unset IFS
    A=($line);
    ./do_create_bedpe.sh $BAM_DIR/$(basename ${A[0]} .fastq.gz).nsort.filtered.bed.gz $BAM_DIR/$(basename ${A[1]} .fastq.gz).nsort.filtered.bed.gz $BAM_DIR $BAM_DIR/rep1.pair$I.paired.bedpe
    gzip -9 $BAM_DIR/rep1.pair$I.paired.bedpe
    IFS=$'\n'
    I=$(($I+1))
done

I=1
for line in $(cat $FASTQ_DIR/rep2.pairinfo); do
    unset IFS
    A=($line);
    ./do_create_bedpe.sh $BAM_DIR/$(basename ${A[0]} .fastq.gz).nsort.filtered.bed.gz $BAM_DIR/$(basename ${A[1]} .fastq.gz).nsort.filtered.bed.gz $BAM_DIR $BAM_DIR/rep2.pair$I.paired.bedpe
    gzip -9 $BAM_DIR/rep2.pair$I.paired.bedpe
    IFS=$'\n'
    I=$(($I+1))
done
IFS=$saveIFS


# Combine the replicates...
zcat $BAM_DIR/*.bedpe.gz > $BAM_DIR/$ENCODE_ACC.paired.bedpe


# Get the MANGO pipeline started at stage 3.
./run_mango_pipeline.sh $BAM_DIR/$ENCODE_ACC.paired.bedpe $WD/mango

date

# Filter and trim loop anchors to overlapping CTCF ChIP-seq peaks.
cat <(printf "chrom1\tstart1\tend1\tchrom2\tstart2\tend2\tIAB\tFDR\n") $MANGO_DIR/K562.ENCSR981FNA.paired.interactions.fdr.mango > K562.ENCSR981FNA.paired.interactions.fdr.bedpe
./trim_ChIA-PET.py -b K562.ENCSR981FNA.paired.interactions.fdr.bedpe  -c ../../ChIP-seq/CTCF/CTCF.K562.mergesort.narrowPeak.bgz >> K562.RAD21_ChIA-PET.with_CTCF.trimmed.bedpe
